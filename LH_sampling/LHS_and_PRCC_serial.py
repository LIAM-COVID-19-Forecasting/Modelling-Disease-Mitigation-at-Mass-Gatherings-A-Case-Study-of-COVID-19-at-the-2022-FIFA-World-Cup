"""
Creation:
    Author: Martin Grunnill
    Date: 2022-10-02
Description: Generate Latin-Hypercube Sample (LHS), run simulations via serial processing and calculate Partial
Correlation Coefficients. Recommend looking up
https://www.sciencedirect.com/science/article/abs/pii/S0022519308001896?via%3Dihub.

Note serial processing can be slow.

Functions
---------
format_sample(parameters_df, LH_samples, other_samples_to_repeat=None)
    Formats Latin Hypercube sample generated by scipy.stats.qmc.
calucate_PCC(results_and_sample_df, parameter, output, covariables, method='spearman')
    Calculate Partial Correlation Coefficient PCC (default Rank 'Spearman' PRCC).
LHS_PRCC_serial(parameters_df, sample_size, model_run_method,
                    results_csv = None, LHS_obj=None, y0=None, other_samples_to_repeat=None)
    Generate a Latin Hypercube sample, run model with sample (serially) and calculate PRCC for sampled parameters.

"""

import pandas as pd
from scipy.stats import qmc
from tqdm.auto import tqdm
import pingouin as pg
import copy


def format_sample(parameters_df, LH_samples, other_samples_to_repeat=None, include_seed=True):
    """
    Formats Latin Hypercube sample generated by scipy.stats.qmc.

    Scales LH_samples in with boundaries outlined in parameters_df.

    Parameters
    ----------
    parameters_df : pd.DataFrame
        DataFrame outlining the boundaries for each parameter. Must contain fields 'Lower Bound' and
        'Upper Bound'. Name of the parameters is assumed to be in the index.
    LH_samples : numpy.array
        Output from scipy.stats.qmc.LatinHypercube.
    other_samples_to_repeat : pandas.DataFrame
        Samples to resampled and merged with LH samples.
    include_seed : bool
        Is generation of a seed included in Latin Hypercube sampling.

    Returns
    -------
    samples_df : pandas.Dataframe
        Fully formatted samples.
    parameters_sampled : list
        A list of samples being sampled.
    """
    if include_seed:
        parameters_df = copy.deepcopy(parameters_df)
        parameters_df.loc['seed', :] = {'Lower Bound':0, 'Upper Bound':1e9}

    # if any(~parameters_df['Distribution'].isin(['boolean','uniform'])):
    #     raise ValueError('Only Boolean and Uniform distributions currently supported.')
    samples_df = pd.DataFrame(qmc.scale(LH_samples,
                                        parameters_df['Lower Bound'],
                                        parameters_df['Upper Bound']),
                              columns=parameters_df.index)
    if other_samples_to_repeat is not None:
        multiple = len(samples_df)/len(other_samples_to_repeat)
        if not multiple.is_integer():
            raise ValueError('LHS sample size devided by length of other_samples_to_repeat must be expressable as an interger value.')
        multiple = int(multiple)
        repeated_samples = pd.concat([other_samples_to_repeat] * multiple, ignore_index=True)
        samples_df = pd.concat([samples_df, repeated_samples], axis=1, ignore_index=True)
        parameters_sampled = parameters_df.index.to_list() + other_samples_to_repeat.columns.to_list()
        samples_df.columns = parameters_sampled
    else:
        parameters_sampled = samples_df.columns.to_list()

    # convert_to_bool = parameters_df.Parameter[parameters_df['Distribution'] == 'boolean']
    # for parameter in convert_to_bool:
    #     samples_df[parameter] = samples_df[parameter] >= 0.5
    return samples_df, parameters_sampled


def calucate_PCC(results_and_sample_df, parameter, output, covariables, method='spearman'):
    """
    Calculate Partial Correlation Coefficient PCC (default Rank 'Spearman' PRCC).

    A wrapper for pingouin.partial_corr.

    Parameters
    ----------
    results_and_sample_df : pandas.DataFrame
        DataFrame of results and parameters for calculating PCC.
    parameter : string
        Parameter for which PCC will be calculated.
    output : string
        Model output for which PCC will be calculated.
    covariables : list of strings
        Parameters whose effects will be discounted.
    method : string, default 'spearman' (Rank correlations)
        Form of PCC see documentation of pingouin.partial_corr.


    Returns
    -------
    pandas.DataFrame
        Partial Corelation Coefficient of parameter and output.
    """
    param_pcor = pg.partial_corr(results_and_sample_df,
                                 x=parameter, y=output,
                                 covar=covariables,
                                 method=method)
    param_pcor.rename(index={method: parameter + ' on ' + output}, inplace=True)
    param_pcor['Number_of_Covariables'] = len(covariables)
    confidence_interval = pd.DataFrame(param_pcor['CI95%'].tolist())
    param_pcor['lower_CI_0.95'] = confidence_interval[0][0]
    param_pcor['upper_CI_0.95'] = confidence_interval[1][0]
    param_pcor.drop(columns=['CI95%'], inplace=True)
    return param_pcor


def LHS_PRCC_serial(parameters_df, sample_size, model_run_method,
                    results_csv = None, LHS_obj=None, y0=None, other_samples_to_repeat=None, LHS_include_seed=True):
    """
    Generate a Latin Hypercube sample, run model with sample (serially) and calculate PRCC for sampled parameters.

    
    Parameters
    ----------
    parameters_df : pd.DataFrame
        DataFrame outlining the boundaries for each parameter. Must contain fields 'Lower Bound' and
        'Upper Bound'. Name of the parameters is assumed to be in the index.
    sample_size : int
        Sample size of Latin Hypercube.
    model_run_method : function
        Method of running model simulation. Must accept parameters as a single dictionary. 
    results_csv : string, optional
        If given results are saved to csv instead of being returned as a dataframe.
    LHS_obj : scipy.stats.qmc.LatinHypercube, optional
        Pre-initialised Latin Hypercube sample generator. If not provided one is generated by the function.
    y0 : numpy.array, optional
        Initial values of starting variables.
    other_samples_to_repeat : pandas.DataFrame
        Samples to resampled and merged with LH samples.
    LHS_include_seed : bool
        Include generation of a seed in Latin Hypercube sampling.

    Returns
    -------

    """
    if LHS_obj is None:
        num_LH_parameters_sampled = len(parameters_df)
        if LHS_include_seed:
            num_LH_parameters_sampled += 1
        LHS_obj = qmc.LatinHypercube(num_LH_parameters_sampled)
    LH_sample = LHS_obj.random(sample_size)
    sample_df, parameters_sampled = format_sample(parameters_df, LH_sample, other_samples_to_repeat,
                                                  include_seed=LHS_include_seed)
    focused_results_and_sample_records = []
    samples = sample_df.to_dict('records')
    for sample in tqdm(samples, desc='Simulating LH Sample', position=1, leave=False, colour='green'):
        if y0 is None:
            focused_results_and_sample_records.append(model_run_method(sample))
        else:
            focused_results_and_sample_records.append(model_run_method(sample, y0=y0))
    focused_results_and_sample_df = pd.DataFrame.from_records(focused_results_and_sample_records)
    prccs = []
    for parameter in parameters_sampled:
        covariables = [item
                       for item in parameters_sampled
                       if item != parameter]
        for column in focused_results_and_sample_df.columns:
            if column not in parameters_sampled:
                param_rank_pcor = calucate_PCC(sample_df, parameter, column, covariables, method='spearman')
                prccs.append(param_rank_pcor)

    prccs = pd.concat(prccs)
    prccs.sort_index(inplace=True)
    if results_csv is not None:
        prccs.to_csv(results_csv)
    else:
        return prccs





